{"ast":null,"code":"import axios from'axios';import{verifyCustomerIdentity}from'../config/auth';// Define interfaces for stronger typing\nclass CertificationService{constructor(){this.baseUrl=void 0;// TODO: Replace with actual backend URL\nthis.baseUrl=process.env.REACT_APP_CERTIFICATION_API||'https://api.streetcollector.com';}// Public method to fetch customer data\nasync fetchCustomerData(customerId){try{const response=await axios.get(\"\".concat(this.baseUrl,\"/customers/\").concat(customerId));const customerData=response.data;if(!customerData||!customerData.id){throw new Error('Invalid customer data');}return customerData;}catch(error){console.error('Failed to fetch customer data',error);throw error;}}// Public method to get certifications\nasync getCertifications(customerId){try{const response=await axios.get(\"\".concat(this.baseUrl,\"/customers/\").concat(customerId,\"/certifications\"));const certifications=response.data;return certifications||[];}catch(error){console.error('Failed to fetch certifications',error);return[];}}// Fetch artwork metadata\nasync getArtworkMetadata(artworkId){try{const response=await axios.get(\"\".concat(this.baseUrl,\"/artworks/\").concat(artworkId));const artworkMetadata=response.data;if(!artworkMetadata||!artworkMetadata.id){throw new Error('Unable to retrieve artwork details');}return artworkMetadata;}catch(error){console.error('Failed to fetch artwork metadata',error);throw new Error('Unable to retrieve artwork details');}}// Verify NFC certification\nasync verifyCertification(certificationId){try{const response=await axios.post(\"\".concat(this.baseUrl,\"/verify-certification\"),{certificationId});const verificationResult=response.data;return{isValid:verificationResult.isValid,details:{certificationId,verifiedAt:new Date(),verificationMethod:'NFC'}};}catch(error){console.error('Certification verification failed',error);return{isValid:false,details:{certificationId,verifiedAt:new Date(),verificationMethod:'NFC'}};}}// Track artwork provenance\nasync getArtworkProvenance(artworkId){try{const response=await axios.get(\"\".concat(this.baseUrl,\"/artworks/\").concat(artworkId,\"/provenance\"));const provenance=response.data;return provenance.provenance||[];}catch(error){console.error('Failed to fetch artwork provenance',error);return[];}}// Enhanced customer verification\nasync verifyCustomer(customerId){try{const customerData=await this.fetchCustomerData(customerId);return await verifyCustomerIdentity(customerData);}catch(error){console.error('Customer verification failed',error);return{verified:false,customerType:'unverified'};}}}export default new CertificationService();","map":{"version":3,"names":["axios","verifyCustomerIdentity","CertificationService","constructor","baseUrl","process","env","REACT_APP_CERTIFICATION_API","fetchCustomerData","customerId","response","get","concat","customerData","data","id","Error","error","console","getCertifications","certifications","getArtworkMetadata","artworkId","artworkMetadata","verifyCertification","certificationId","post","verificationResult","isValid","details","verifiedAt","Date","verificationMethod","getArtworkProvenance","provenance","verifyCustomer","verified","customerType"],"sources":["/Users/chonib/Repos/coa-service/customer-portal/src/services/CertificationService.ts"],"sourcesContent":["import axios from 'axios';\nimport { verifyCustomerIdentity } from '../config/auth';\n\n// Define interfaces for stronger typing\nexport interface ArtworkMetadata {\n  id: string;\n  title: string;\n  artist: string;\n  creationDate: Date;\n  provenance: string[];\n  certificationType: 'digital' | 'physical' | 'hybrid';\n}\n\nexport interface CertificationVerificationResult {\n  isValid: boolean;\n  details: {\n    certificationId: string;\n    verifiedAt: Date;\n    verificationMethod: string;\n  };\n}\n\nexport interface DigitalArtCertification {\n  id: string;\n  artworkTitle: string;\n  artistName: string;\n  certificationDate: Date;\n  nfcTagId?: string;\n  verificationStatus: 'verified' | 'pending' | 'rejected';\n}\n\nexport interface CustomerData {\n  id: string;\n  email: string;\n  name?: string;\n  first_name?: string;\n  last_name?: string;\n}\n\nclass CertificationService {\n  private baseUrl: string;\n\n  constructor() {\n    // TODO: Replace with actual backend URL\n    this.baseUrl = process.env.REACT_APP_CERTIFICATION_API || 'https://api.streetcollector.com';\n  }\n\n  // Public method to fetch customer data\n  public async fetchCustomerData(customerId: string): Promise<CustomerData> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/customers/${customerId}`);\n      const customerData = response.data as CustomerData;\n      \n      if (!customerData || !customerData.id) {\n        throw new Error('Invalid customer data');\n      }\n\n      return customerData;\n    } catch (error) {\n      console.error('Failed to fetch customer data', error);\n      throw error;\n    }\n  }\n\n  // Public method to get certifications\n  public async getCertifications(customerId: string): Promise<DigitalArtCertification[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/customers/${customerId}/certifications`);\n      const certifications = response.data as DigitalArtCertification[];\n      \n      return certifications || [];\n    } catch (error) {\n      console.error('Failed to fetch certifications', error);\n      return [];\n    }\n  }\n\n  // Fetch artwork metadata\n  public async getArtworkMetadata(artworkId: string): Promise<ArtworkMetadata> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/artworks/${artworkId}`);\n      const artworkMetadata = response.data as ArtworkMetadata;\n\n      if (!artworkMetadata || !artworkMetadata.id) {\n        throw new Error('Unable to retrieve artwork details');\n      }\n\n      return artworkMetadata;\n    } catch (error) {\n      console.error('Failed to fetch artwork metadata', error);\n      throw new Error('Unable to retrieve artwork details');\n    }\n  }\n\n  // Verify NFC certification\n  public async verifyCertification(certificationId: string): Promise<CertificationVerificationResult> {\n    try {\n      const response = await axios.post(`${this.baseUrl}/verify-certification`, { \n        certificationId \n      });\n\n      const verificationResult = response.data as { isValid: boolean };\n\n      return {\n        isValid: verificationResult.isValid,\n        details: {\n          certificationId,\n          verifiedAt: new Date(),\n          verificationMethod: 'NFC'\n        }\n      };\n    } catch (error) {\n      console.error('Certification verification failed', error);\n      return {\n        isValid: false,\n        details: {\n          certificationId,\n          verifiedAt: new Date(),\n          verificationMethod: 'NFC'\n        }\n      };\n    }\n  }\n\n  // Track artwork provenance\n  public async getArtworkProvenance(artworkId: string): Promise<string[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/artworks/${artworkId}/provenance`);\n      const provenance = response.data as { provenance: string[] };\n      \n      return provenance.provenance || [];\n    } catch (error) {\n      console.error('Failed to fetch artwork provenance', error);\n      return [];\n    }\n  }\n\n  // Enhanced customer verification\n  async verifyCustomer(customerId: string) {\n    try {\n      const customerData = await this.fetchCustomerData(customerId);\n      return await verifyCustomerIdentity(customerData);\n    } catch (error) {\n      console.error('Customer verification failed', error);\n      return { \n        verified: false, \n        customerType: 'unverified' \n      };\n    }\n  }\n}\n\nexport default new CertificationService(); "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,sBAAsB,KAAQ,gBAAgB,CAEvD;AAoCA,KAAM,CAAAC,oBAAqB,CAGzBC,WAAWA,CAAA,CAAG,MAFNC,OAAO,QAGb;AACA,IAAI,CAACA,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B,EAAI,iCAAiC,CAC7F,CAEA;AACA,KAAa,CAAAC,iBAAiBA,CAACC,UAAkB,CAAyB,CACxE,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,IAAAC,MAAA,CAAI,IAAI,CAACR,OAAO,gBAAAQ,MAAA,CAAcH,UAAU,CAAE,CAAC,CAC3E,KAAM,CAAAI,YAAY,CAAGH,QAAQ,CAACI,IAAoB,CAElD,GAAI,CAACD,YAAY,EAAI,CAACA,YAAY,CAACE,EAAE,CAAE,CACrC,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA,MAAO,CAAAH,YAAY,CACrB,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAa,CAAAE,iBAAiBA,CAACV,UAAkB,CAAsC,CACrF,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,IAAAC,MAAA,CAAI,IAAI,CAACR,OAAO,gBAAAQ,MAAA,CAAcH,UAAU,mBAAiB,CAAC,CAC1F,KAAM,CAAAW,cAAc,CAAGV,QAAQ,CAACI,IAAiC,CAEjE,MAAO,CAAAM,cAAc,EAAI,EAAE,CAC7B,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,EAAE,CACX,CACF,CAEA;AACA,KAAa,CAAAI,kBAAkBA,CAACC,SAAiB,CAA4B,CAC3E,GAAI,CACF,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,IAAAC,MAAA,CAAI,IAAI,CAACR,OAAO,eAAAQ,MAAA,CAAaU,SAAS,CAAE,CAAC,CACzE,KAAM,CAAAC,eAAe,CAAGb,QAAQ,CAACI,IAAuB,CAExD,GAAI,CAACS,eAAe,EAAI,CAACA,eAAe,CAACR,EAAE,CAAE,CAC3C,KAAM,IAAI,CAAAC,KAAK,CAAC,oCAAoC,CAAC,CACvD,CAEA,MAAO,CAAAO,eAAe,CACxB,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,KAAM,IAAI,CAAAD,KAAK,CAAC,oCAAoC,CAAC,CACvD,CACF,CAEA;AACA,KAAa,CAAAQ,mBAAmBA,CAACC,eAAuB,CAA4C,CAClG,GAAI,CACF,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAAC0B,IAAI,IAAAd,MAAA,CAAI,IAAI,CAACR,OAAO,0BAAyB,CACxEqB,eACF,CAAC,CAAC,CAEF,KAAM,CAAAE,kBAAkB,CAAGjB,QAAQ,CAACI,IAA4B,CAEhE,MAAO,CACLc,OAAO,CAAED,kBAAkB,CAACC,OAAO,CACnCC,OAAO,CAAE,CACPJ,eAAe,CACfK,UAAU,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACtBC,kBAAkB,CAAE,KACtB,CACF,CAAC,CACH,CAAE,MAAOf,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,CACLW,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CACPJ,eAAe,CACfK,UAAU,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACtBC,kBAAkB,CAAE,KACtB,CACF,CAAC,CACH,CACF,CAEA;AACA,KAAa,CAAAC,oBAAoBA,CAACX,SAAiB,CAAqB,CACtE,GAAI,CACF,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,IAAAC,MAAA,CAAI,IAAI,CAACR,OAAO,eAAAQ,MAAA,CAAaU,SAAS,eAAa,CAAC,CACpF,KAAM,CAAAY,UAAU,CAAGxB,QAAQ,CAACI,IAAgC,CAE5D,MAAO,CAAAoB,UAAU,CAACA,UAAU,EAAI,EAAE,CACpC,CAAE,MAAOjB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1D,MAAO,EAAE,CACX,CACF,CAEA;AACA,KAAM,CAAAkB,cAAcA,CAAC1B,UAAkB,CAAE,CACvC,GAAI,CACF,KAAM,CAAAI,YAAY,CAAG,KAAM,KAAI,CAACL,iBAAiB,CAACC,UAAU,CAAC,CAC7D,MAAO,MAAM,CAAAR,sBAAsB,CAACY,YAAY,CAAC,CACnD,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,MAAO,CACLmB,QAAQ,CAAE,KAAK,CACfC,YAAY,CAAE,YAChB,CAAC,CACH,CACF,CACF,CAEA,cAAe,IAAI,CAAAnC,oBAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}