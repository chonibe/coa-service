{"ast":null,"code":"import _objectSpread from\"/Users/chonib/Repos/coa-service/customer-portal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';// Custom Polaris import to bypass type declaration\nconst Polaris={Card:props=>/*#__PURE__*/React.createElement('div',_objectSpread(_objectSpread({},props),{},{className:'polaris-card'})),Text:props=>/*#__PURE__*/React.createElement('p',_objectSpread(_objectSpread({},props),{},{className:'polaris-text'})),Button:props=>/*#__PURE__*/React.createElement('button',_objectSpread(_objectSpread({},props),{},{className:'polaris-button'})),Heading:props=>/*#__PURE__*/React.createElement('h2',_objectSpread(_objectSpread({},props),{},{className:'polaris-heading'})),TextField:props=>/*#__PURE__*/React.createElement('input',_objectSpread(_objectSpread({},props),{},{className:'polaris-text-field',type:props.type||'text'})),BlockStack:props=>/*#__PURE__*/React.createElement('div',_objectSpread(_objectSpread({},props),{},{className:\"polaris-block-stack \".concat(props.className||''),style:{display:'flex',flexDirection:'column',gap:props.gap||'0'}})),InlineStack:props=>/*#__PURE__*/React.createElement('div',_objectSpread(_objectSpread({},props),{},{className:\"polaris-inline-stack \".concat(props.className||''),style:{display:'flex',gap:props.gap||'0'}}))};import{retrieveCustomerId,verifyCustomerIdentity,handleAuthenticationError,MultiFactorAuthService}from'../config/auth';import CertificationService from'../services/CertificationService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CustomerDashboard=()=>{const[customer,setCustomer]=useState(null);const[certifications,setCertifications]=useState([]);const[error,setError]=useState(null);const[isLoading,setIsLoading]=useState(true);// Multi-Factor Authentication State\nconst[mfaRequired,setMfaRequired]=useState(false);const[verificationCode,setVerificationCode]=useState('');const[mfaMessage,setMfaMessage]=useState('');// Multi-Factor Authentication Service\nconst mfaService=MultiFactorAuthService.getInstance();useEffect(()=>{const initializeDashboard=async()=>{try{// Retrieve customer ID from multiple sources\nconst customerId=retrieveCustomerId();if(!customerId){throw new Error('Invalid customer data');}// Fetch customer data and verify identity\nconst customerData=await CertificationService.fetchCustomerData(customerId);const verifiedCustomer=await verifyCustomerIdentity(customerData);if(!verifiedCustomer.verified){// Trigger Multi-Factor Authentication\nsetMfaRequired(true);setCustomer(verifiedCustomer);}else{// Proceed with dashboard initialization\nsetCustomer(verifiedCustomer);// Fetch customer's digital art certifications\nconst fetchedCertifications=await CertificationService.getCertifications(customerId);setCertifications(fetchedCertifications);}setIsLoading(false);}catch(err){// Centralized error handling\nconst errorDetails=handleAuthenticationError(err);setError(errorDetails);setIsLoading(false);}};initializeDashboard();},[]);// Verify MFA Code\nconst handleMfaVerification=async()=>{try{// In a real scenario, you'd get the expected code from the backend\nconst result=await mfaService.verifyCode(verificationCode,'123456');if(result.verified){// Complete customer verification\nsetMfaRequired(false);// Fetch certifications after successful MFA\nif(customer!==null&&customer!==void 0&&customer.id){const fetchedCertifications=await CertificationService.getCertifications(customer.id);setCertifications(fetchedCertifications);}}else{setMfaMessage('Invalid verification code. Please try again.');}}catch(error){setMfaMessage('An error occurred during verification.');}};// Redirect on error\nuseEffect(()=>{if(error!==null&&error!==void 0&&error.redirect){window.location.href=error.redirect;}},[error]);// Loading state\nif(isLoading){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(Polaris.Text,{children:\"Loading your dashboard...\"})]});}// Multi-Factor Authentication State\nif(mfaRequired){return/*#__PURE__*/_jsx(Polaris.Card,{children:/*#__PURE__*/_jsxs(Polaris.BlockStack,{gap:\"4\",children:[/*#__PURE__*/_jsx(Polaris.Heading,{children:\"Multi-Factor Authentication\"}),/*#__PURE__*/_jsxs(Polaris.Text,{children:[\"A verification code has been sent to \",customer===null||customer===void 0?void 0:customer.email,\". Please enter the code below.\"]}),/*#__PURE__*/_jsx(Polaris.TextField,{label:\"Verification Code\",value:verificationCode,onChange:event=>setVerificationCode(event.target.value),placeholder:\"Enter 6-digit code\"}),mfaMessage&&/*#__PURE__*/_jsx(Polaris.Text,{color:\"critical\",children:mfaMessage}),/*#__PURE__*/_jsx(Polaris.Button,{onClick:handleMfaVerification,children:\"Verify Code\"})]})});}// Error state\nif(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"error-state\",children:[/*#__PURE__*/_jsx(Polaris.Text,{children:error.message}),/*#__PURE__*/_jsx(Polaris.Button,{onClick:()=>window.location.reload(),children:\"Try Again\"})]});}// Main dashboard view\nreturn/*#__PURE__*/_jsxs(Polaris.BlockStack,{gap:\"4\",children:[/*#__PURE__*/_jsxs(Polaris.Heading,{children:[\"Welcome, \",customer===null||customer===void 0?void 0:customer.name]}),certifications.length===0?/*#__PURE__*/_jsx(Polaris.Card,{children:/*#__PURE__*/_jsxs(Polaris.BlockStack,{gap:\"2\",children:[/*#__PURE__*/_jsx(Polaris.Text,{children:\"You haven't received any digital art certifications yet.\"}),/*#__PURE__*/_jsx(Polaris.Button,{children:\"Explore Certifications\"})]})}):/*#__PURE__*/_jsxs(Polaris.Card,{children:[/*#__PURE__*/_jsx(Polaris.Heading,{children:\"Your Digital Art Certifications\"}),certifications.map(cert=>/*#__PURE__*/_jsx(Polaris.Card,{children:/*#__PURE__*/_jsxs(Polaris.InlineStack,{gap:\"4\",children:[/*#__PURE__*/_jsx(Polaris.Text,{children:cert.artworkTitle}),/*#__PURE__*/_jsx(Polaris.Text,{children:cert.artistName}),/*#__PURE__*/_jsx(Polaris.Text,{children:cert.verificationStatus})]})},cert.id))]})]});};export default CustomerDashboard;","map":{"version":3,"names":["React","useState","useEffect","Polaris","Card","props","createElement","_objectSpread","className","Text","Button","Heading","TextField","type","BlockStack","concat","style","display","flexDirection","gap","InlineStack","retrieveCustomerId","verifyCustomerIdentity","handleAuthenticationError","MultiFactorAuthService","CertificationService","jsx","_jsx","jsxs","_jsxs","CustomerDashboard","customer","setCustomer","certifications","setCertifications","error","setError","isLoading","setIsLoading","mfaRequired","setMfaRequired","verificationCode","setVerificationCode","mfaMessage","setMfaMessage","mfaService","getInstance","initializeDashboard","customerId","Error","customerData","fetchCustomerData","verifiedCustomer","verified","fetchedCertifications","getCertifications","err","errorDetails","handleMfaVerification","result","verifyCode","id","redirect","window","location","href","children","email","label","value","onChange","event","target","placeholder","color","onClick","message","reload","name","length","map","cert","artworkTitle","artistName","verificationStatus"],"sources":["/Users/chonib/Repos/coa-service/customer-portal/src/components/CustomerDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Custom Polaris import to bypass type declaration\nconst Polaris = {\n  Card: (props: any) => React.createElement('div', { ...props, className: 'polaris-card' }),\n  Text: (props: any) => React.createElement('p', { ...props, className: 'polaris-text' }),\n  Button: (props: any) => React.createElement('button', { ...props, className: 'polaris-button' }),\n  Heading: (props: any) => React.createElement('h2', { ...props, className: 'polaris-heading' }),\n  TextField: (props: any) => React.createElement('input', { \n    ...props, \n    className: 'polaris-text-field',\n    type: props.type || 'text'\n  }),\n  BlockStack: (props: any) => React.createElement('div', { \n    ...props, \n    className: `polaris-block-stack ${props.className || ''}`,\n    style: { display: 'flex', flexDirection: 'column', gap: props.gap || '0' }\n  }),\n  InlineStack: (props: any) => React.createElement('div', { \n    ...props, \n    className: `polaris-inline-stack ${props.className || ''}`,\n    style: { display: 'flex', gap: props.gap || '0' }\n  })\n};\n\nimport { \n  retrieveCustomerId, \n  verifyCustomerIdentity, \n  handleAuthenticationError,\n  CustomerIdentity,\n  MultiFactorAuthService\n} from '../config/auth';\n\nimport CertificationService, { \n  DigitalArtCertification,\n  CustomerData\n} from '../services/CertificationService';\n\nconst CustomerDashboard: React.FC = () => {\n  const [customer, setCustomer] = useState<CustomerIdentity | null>(null);\n  const [certifications, setCertifications] = useState<DigitalArtCertification[]>([]);\n  const [error, setError] = useState<{ message: string; redirect?: string } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Multi-Factor Authentication State\n  const [mfaRequired, setMfaRequired] = useState(false);\n  const [verificationCode, setVerificationCode] = useState('');\n  const [mfaMessage, setMfaMessage] = useState('');\n\n  // Multi-Factor Authentication Service\n  const mfaService = MultiFactorAuthService.getInstance();\n\n  useEffect(() => {\n    const initializeDashboard = async () => {\n      try {\n        // Retrieve customer ID from multiple sources\n        const customerId = retrieveCustomerId();\n        \n        if (!customerId) {\n          throw new Error('Invalid customer data');\n        }\n\n        // Fetch customer data and verify identity\n        const customerData: CustomerData = await CertificationService.fetchCustomerData(customerId);\n        const verifiedCustomer = await verifyCustomerIdentity(customerData);\n        \n        if (!verifiedCustomer.verified) {\n          // Trigger Multi-Factor Authentication\n          setMfaRequired(true);\n          setCustomer(verifiedCustomer);\n        } else {\n          // Proceed with dashboard initialization\n          setCustomer(verifiedCustomer);\n\n          // Fetch customer's digital art certifications\n          const fetchedCertifications = await CertificationService.getCertifications(customerId);\n          setCertifications(fetchedCertifications);\n        }\n\n        setIsLoading(false);\n      } catch (err) {\n        // Centralized error handling\n        const errorDetails = handleAuthenticationError(err as Error);\n        setError(errorDetails);\n        setIsLoading(false);\n      }\n    };\n\n    initializeDashboard();\n  }, []);\n\n  // Verify MFA Code\n  const handleMfaVerification = async () => {\n    try {\n      // In a real scenario, you'd get the expected code from the backend\n      const result = await mfaService.verifyCode(verificationCode, '123456');\n      \n      if (result.verified) {\n        // Complete customer verification\n        setMfaRequired(false);\n        \n        // Fetch certifications after successful MFA\n        if (customer?.id) {\n          const fetchedCertifications = await CertificationService.getCertifications(customer.id);\n          setCertifications(fetchedCertifications);\n        }\n      } else {\n        setMfaMessage('Invalid verification code. Please try again.');\n      }\n    } catch (error) {\n      setMfaMessage('An error occurred during verification.');\n    }\n  };\n\n  // Redirect on error\n  useEffect(() => {\n    if (error?.redirect) {\n      window.location.href = error.redirect;\n    }\n  }, [error]);\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"loading-state\">\n        <div className=\"loading-spinner\"></div>\n        <Polaris.Text>Loading your dashboard...</Polaris.Text>\n      </div>\n    );\n  }\n\n  // Multi-Factor Authentication State\n  if (mfaRequired) {\n    return (\n      <Polaris.Card>\n        <Polaris.BlockStack gap=\"4\">\n          <Polaris.Heading>Multi-Factor Authentication</Polaris.Heading>\n          <Polaris.Text>\n            A verification code has been sent to {customer?.email}. \n            Please enter the code below.\n          </Polaris.Text>\n          \n          <Polaris.TextField\n            label=\"Verification Code\"\n            value={verificationCode}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => setVerificationCode(event.target.value)}\n            placeholder=\"Enter 6-digit code\"\n          />\n          \n          {mfaMessage && (\n            <Polaris.Text color=\"critical\">{mfaMessage}</Polaris.Text>\n          )}\n          \n          <Polaris.Button onClick={handleMfaVerification}>\n            Verify Code\n          </Polaris.Button>\n        </Polaris.BlockStack>\n      </Polaris.Card>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div className=\"error-state\">\n        <Polaris.Text>{error.message}</Polaris.Text>\n        <Polaris.Button onClick={() => window.location.reload()}>Try Again</Polaris.Button>\n      </div>\n    );\n  }\n\n  // Main dashboard view\n  return (\n    <Polaris.BlockStack gap=\"4\">\n      <Polaris.Heading>Welcome, {customer?.name}</Polaris.Heading>\n      \n      {certifications.length === 0 ? (\n        <Polaris.Card>\n          <Polaris.BlockStack gap=\"2\">\n            <Polaris.Text>You haven't received any digital art certifications yet.</Polaris.Text>\n            <Polaris.Button>Explore Certifications</Polaris.Button>\n          </Polaris.BlockStack>\n        </Polaris.Card>\n      ) : (\n        <Polaris.Card>\n          <Polaris.Heading>Your Digital Art Certifications</Polaris.Heading>\n          {certifications.map(cert => (\n            <Polaris.Card key={cert.id}>\n              <Polaris.InlineStack gap=\"4\">\n                <Polaris.Text>{cert.artworkTitle}</Polaris.Text>\n                <Polaris.Text>{cert.artistName}</Polaris.Text>\n                <Polaris.Text>{cert.verificationStatus}</Polaris.Text>\n              </Polaris.InlineStack>\n            </Polaris.Card>\n          ))}\n        </Polaris.Card>\n      )}\n    </Polaris.BlockStack>\n  );\n};\n\nexport default CustomerDashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}