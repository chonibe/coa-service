{"ast":null,"code":"import _objectSpread from\"/Users/chonib/Repos/coa-service/customer-portal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _MultiFactorAuthService;// import { ShopifyAuth } from '@shopify/shopify-api';\n// Enhanced customer authentication interface\n// Multi-Factor Authentication Interface\n// Enhanced Multi-Factor Authentication Service\nexport class MultiFactorAuthService{constructor(){this.config=void 0;// Default MFA configuration\nthis.config={enabled:true,methods:['email','sms'],preferredMethod:'email'};}// Singleton pattern\nstatic getInstance(){if(!MultiFactorAuthService.instance){MultiFactorAuthService.instance=new MultiFactorAuthService();}return MultiFactorAuthService.instance;}// Configure MFA settings\nconfigure(config){this.config=_objectSpread(_objectSpread({},this.config),config);}// Generate and send verification code\nasync generateVerificationCode(method,identifier){// Simulate verification code generation\nif(!this.config.methods.includes(method)){return{success:false,message:'Unsupported authentication method'};}try{// In a real implementation, this would interact with a backend service\nconst code=Math.floor(100000+Math.random()*900000).toString();// Simulated code sending logic\nawait this.sendVerificationCode(method,identifier,code);return{success:true,message:\"Verification code sent to \".concat(identifier,\" via \").concat(method)};}catch(error){return{success:false,message:'Failed to send verification code'};}}// Verify authentication code\nasync verifyCode(code,expectedCode){// Simple code verification\nreturn{verified:code===expectedCode};}// Simulated code sending method\nasync sendVerificationCode(method,identifier,code){console.log(\"Sending \".concat(method,\" verification code to \").concat(identifier));// Placeholder for actual implementation\n// Would integrate with SMS/Email services\n}// Get current MFA configuration\ngetConfig(){return _objectSpread({},this.config);}}// Update existing authentication configuration\n_MultiFactorAuthService=MultiFactorAuthService;MultiFactorAuthService.instance=void 0;export const shopifyAuthConfig={// Comprehensive Shopify authentication scopes\nscopes:['read_customers','write_customers','read_products','read_orders','read_content'],// Advanced authentication strategy\nauthStrategy:{type:'oauth',grantMode:'online',redirectHandling:{primary:'https://dashboard.thestreetlamp.com/dashboard/{customer_id}',fallback:'/account',errorRedirect:'/login'}},// Custom authentication settings\ncustomSettings:{nfcCertificationVerification:true,digitalArtOwnershipTracking:true,multiFactorAuthentication:true}};// Enhanced customer identity verification with MFA\nexport const verifyCustomerIdentity=async function(customerData){let mfaService=arguments.length>1&&arguments[1]!==undefined?arguments[1]:MultiFactorAuthService.getInstance();// Comprehensive identity verification logic\nif(!customerData||!customerData.id){throw new Error('Invalid customer data');}// Perform multi-source verification\nconst verificationSources=[{source:'shopify',verified:!!customerData.id},{source:'email',verified:!!customerData.email}// Add more verification sources as needed\n];const isFullyVerified=verificationSources.every(source=>source.verified);const baseVerification={id:customerData.id,email:customerData.email,name:customerData.name||\"\".concat(customerData.first_name,\" \").concat(customerData.last_name).trim(),verified:false};// Check if MFA is required\nconst mfaConfig=mfaService.getConfig();if(mfaConfig.enabled){// Trigger MFA verification\nconst mfaResult=await mfaService.generateVerificationCode(mfaConfig.preferredMethod||'email',customerData.email);return _objectSpread(_objectSpread({},baseVerification),{},{verified:mfaResult.success});}return _objectSpread(_objectSpread({},baseVerification),{},{verified:true});};// Customer ID retrieval utility\nexport const retrieveCustomerId=()=>{// Multi-source customer ID retrieval\nconst sources=[()=>{var _SHOPIFY_CUSTOMER;return(_SHOPIFY_CUSTOMER=window.SHOPIFY_CUSTOMER)===null||_SHOPIFY_CUSTOMER===void 0?void 0:_SHOPIFY_CUSTOMER.id;},()=>new URLSearchParams(window.location.search).get('account'),()=>{var _document$querySelect;return(_document$querySelect=document.querySelector('meta[name=\"customer_id\"]'))===null||_document$querySelect===void 0?void 0:_document$querySelect.getAttribute('content');},()=>{var _document$getElementB;return(_document$getElementB=document.getElementById('coa-dashboard-app'))===null||_document$getElementB===void 0?void 0:_document$getElementB.dataset.customerId;}];for(const source of sources){const id=source();if(id)return id;}return null;};// Error handling utility\nexport const handleAuthenticationError=error=>{console.error('Authentication Error:',error);// Centralized error tracking\nconst errorTypes={'Invalid customer data':{message:'Please log in to access your dashboard',redirectTo:'/login'}};const defaultErrorConfig={message:'An unexpected error occurred',redirectTo:'/account'};const errorConfig=errorTypes[error.message]||defaultErrorConfig;// Optional: Send error to monitoring service\n// trackError(error);\nreturn{error:true,message:errorConfig.message,redirect:errorConfig.redirectTo};};","map":{"version":3,"names":["MultiFactorAuthService","constructor","config","enabled","methods","preferredMethod","getInstance","instance","configure","_objectSpread","generateVerificationCode","method","identifier","includes","success","message","code","Math","floor","random","toString","sendVerificationCode","concat","error","verifyCode","expectedCode","verified","console","log","getConfig","_MultiFactorAuthService","shopifyAuthConfig","scopes","authStrategy","type","grantMode","redirectHandling","primary","fallback","errorRedirect","customSettings","nfcCertificationVerification","digitalArtOwnershipTracking","multiFactorAuthentication","verifyCustomerIdentity","customerData","mfaService","arguments","length","undefined","id","Error","verificationSources","source","email","isFullyVerified","every","baseVerification","name","first_name","last_name","trim","mfaConfig","mfaResult","retrieveCustomerId","sources","_SHOPIFY_CUSTOMER","window","SHOPIFY_CUSTOMER","URLSearchParams","location","search","get","_document$querySelect","document","querySelector","getAttribute","_document$getElementB","getElementById","dataset","customerId","handleAuthenticationError","errorTypes","redirectTo","defaultErrorConfig","errorConfig","redirect"],"sources":["/Users/chonib/Repos/coa-service/customer-portal/src/config/auth.ts"],"sourcesContent":["// import { ShopifyAuth } from '@shopify/shopify-api';\n\n// Enhanced customer authentication interface\nexport interface CustomerIdentity {\n  id: string;\n  email: string;\n  name: string;\n  verified: boolean;\n}\n\n// Multi-Factor Authentication Interface\nexport interface MultiFactorAuthConfig {\n  enabled: boolean;\n  methods: Array<'email' | 'sms' | 'authenticator_app' | 'hardware_token'>;\n  preferredMethod?: string;\n}\n\n// Enhanced Multi-Factor Authentication Service\nexport class MultiFactorAuthService {\n  private static instance: MultiFactorAuthService;\n  private config: MultiFactorAuthConfig;\n\n  private constructor() {\n    // Default MFA configuration\n    this.config = {\n      enabled: true,\n      methods: ['email', 'sms'],\n      preferredMethod: 'email'\n    };\n  }\n\n  // Singleton pattern\n  public static getInstance(): MultiFactorAuthService {\n    if (!MultiFactorAuthService.instance) {\n      MultiFactorAuthService.instance = new MultiFactorAuthService();\n    }\n    return MultiFactorAuthService.instance;\n  }\n\n  // Configure MFA settings\n  public configure(config: Partial<MultiFactorAuthConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  // Generate and send verification code\n  public async generateVerificationCode(\n    method: string, \n    identifier: string\n  ): Promise<{ success: boolean; message?: string }> {\n    // Simulate verification code generation\n    if (!this.config.methods.includes(method as any)) {\n      return { \n        success: false, \n        message: 'Unsupported authentication method' \n      };\n    }\n\n    try {\n      // In a real implementation, this would interact with a backend service\n      const code = Math.floor(100000 + Math.random() * 900000).toString();\n      \n      // Simulated code sending logic\n      await this.sendVerificationCode(method, identifier, code);\n\n      return { \n        success: true, \n        message: `Verification code sent to ${identifier} via ${method}` \n      };\n    } catch (error) {\n      return { \n        success: false, \n        message: 'Failed to send verification code' \n      };\n    }\n  }\n\n  // Verify authentication code\n  public async verifyCode(\n    code: string, \n    expectedCode: string\n  ): Promise<{ verified: boolean }> {\n    // Simple code verification\n    return { \n      verified: code === expectedCode \n    };\n  }\n\n  // Simulated code sending method\n  private async sendVerificationCode(\n    method: string, \n    identifier: string, \n    code: string\n  ): Promise<void> {\n    console.log(`Sending ${method} verification code to ${identifier}`);\n    // Placeholder for actual implementation\n    // Would integrate with SMS/Email services\n  }\n\n  // Get current MFA configuration\n  public getConfig(): MultiFactorAuthConfig {\n    return { ...this.config };\n  }\n}\n\n// Update existing authentication configuration\nexport const shopifyAuthConfig = {\n  // Comprehensive Shopify authentication scopes\n  scopes: [\n    'read_customers',\n    'write_customers',\n    'read_products',\n    'read_orders',\n    'read_content'\n  ],\n  \n  // Advanced authentication strategy\n  authStrategy: {\n    type: 'oauth',\n    grantMode: 'online',\n    redirectHandling: {\n      primary: 'https://dashboard.thestreetlamp.com/dashboard/{customer_id}',\n      fallback: '/account',\n      errorRedirect: '/login'\n    }\n  },\n\n  // Custom authentication settings\n  customSettings: {\n    nfcCertificationVerification: true,\n    digitalArtOwnershipTracking: true,\n    multiFactorAuthentication: true\n  }\n};\n\n// Enhanced customer identity verification with MFA\nexport const verifyCustomerIdentity = async (\n  customerData: any, \n  mfaService: MultiFactorAuthService = MultiFactorAuthService.getInstance()\n): Promise<CustomerIdentity> => {\n  // Comprehensive identity verification logic\n  if (!customerData || !customerData.id) {\n    throw new Error('Invalid customer data');\n  }\n\n  // Perform multi-source verification\n  const verificationSources = [\n    { source: 'shopify', verified: !!customerData.id },\n    { source: 'email', verified: !!customerData.email },\n    // Add more verification sources as needed\n  ];\n\n  const isFullyVerified = verificationSources.every(source => source.verified);\n\n  const baseVerification = {\n    id: customerData.id,\n    email: customerData.email,\n    name: customerData.name || `${customerData.first_name} ${customerData.last_name}`.trim(),\n    verified: false\n  };\n\n  // Check if MFA is required\n  const mfaConfig = mfaService.getConfig();\n  if (mfaConfig.enabled) {\n    // Trigger MFA verification\n    const mfaResult = await mfaService.generateVerificationCode(\n      mfaConfig.preferredMethod || 'email', \n      customerData.email\n    );\n\n    return {\n      ...baseVerification,\n      verified: mfaResult.success\n    };\n  }\n\n  return {\n    ...baseVerification,\n    verified: true\n  };\n};\n\n// Customer ID retrieval utility\nexport const retrieveCustomerId = (): string | null => {\n  // Multi-source customer ID retrieval\n  const sources = [\n    () => (window as any).SHOPIFY_CUSTOMER?.id,\n    () => new URLSearchParams(window.location.search).get('account'),\n    () => document.querySelector('meta[name=\"customer_id\"]')?.getAttribute('content'),\n    () => (document.getElementById('coa-dashboard-app') as HTMLElement)?.dataset.customerId\n  ];\n\n  for (const source of sources) {\n    const id = source();\n    if (id) return id;\n  }\n\n  return null;\n};\n\n// Error handling utility\nexport const handleAuthenticationError = (error: Error) => {\n  console.error('Authentication Error:', error);\n  \n  // Centralized error tracking\n  const errorTypes = {\n    'Invalid customer data': {\n      message: 'Please log in to access your dashboard',\n      redirectTo: '/login'\n    }\n  };\n\n  const defaultErrorConfig = {\n    message: 'An unexpected error occurred',\n    redirectTo: '/account'\n  };\n\n  const errorConfig = errorTypes[error.message as keyof typeof errorTypes] || defaultErrorConfig;\n  \n  // Optional: Send error to monitoring service\n  // trackError(error);\n\n  return {\n    error: true,\n    message: errorConfig.message,\n    redirect: errorConfig.redirectTo\n  };\n}; "],"mappings":"gKAAA;AAEA;AAQA;AAOA;AACA,MAAO,MAAM,CAAAA,sBAAuB,CAI1BC,WAAWA,CAAA,CAAG,MAFdC,MAAM,QAGZ;AACA,IAAI,CAACA,MAAM,CAAG,CACZC,OAAO,CAAE,IAAI,CACbC,OAAO,CAAE,CAAC,OAAO,CAAE,KAAK,CAAC,CACzBC,eAAe,CAAE,OACnB,CAAC,CACH,CAEA;AACA,MAAc,CAAAC,WAAWA,CAAA,CAA2B,CAClD,GAAI,CAACN,sBAAsB,CAACO,QAAQ,CAAE,CACpCP,sBAAsB,CAACO,QAAQ,CAAG,GAAI,CAAAP,sBAAsB,CAAC,CAAC,CAChE,CACA,MAAO,CAAAA,sBAAsB,CAACO,QAAQ,CACxC,CAEA;AACOC,SAASA,CAACN,MAAsC,CAAQ,CAC7D,IAAI,CAACA,MAAM,CAAAO,aAAA,CAAAA,aAAA,IAAQ,IAAI,CAACP,MAAM,EAAKA,MAAM,CAAE,CAC7C,CAEA;AACA,KAAa,CAAAQ,wBAAwBA,CACnCC,MAAc,CACdC,UAAkB,CAC+B,CACjD;AACA,GAAI,CAAC,IAAI,CAACV,MAAM,CAACE,OAAO,CAACS,QAAQ,CAACF,MAAa,CAAC,CAAE,CAChD,MAAO,CACLG,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,mCACX,CAAC,CACH,CAEA,GAAI,CACF;AACA,KAAM,CAAAC,IAAI,CAAGC,IAAI,CAACC,KAAK,CAAC,MAAM,CAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,MAAM,CAAC,CAACC,QAAQ,CAAC,CAAC,CAEnE;AACA,KAAM,KAAI,CAACC,oBAAoB,CAACV,MAAM,CAAEC,UAAU,CAAEI,IAAI,CAAC,CAEzD,MAAO,CACLF,OAAO,CAAE,IAAI,CACbC,OAAO,8BAAAO,MAAA,CAA+BV,UAAU,UAAAU,MAAA,CAAQX,MAAM,CAChE,CAAC,CACH,CAAE,MAAOY,KAAK,CAAE,CACd,MAAO,CACLT,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,kCACX,CAAC,CACH,CACF,CAEA;AACA,KAAa,CAAAS,UAAUA,CACrBR,IAAY,CACZS,YAAoB,CACY,CAChC;AACA,MAAO,CACLC,QAAQ,CAAEV,IAAI,GAAKS,YACrB,CAAC,CACH,CAEA;AACA,KAAc,CAAAJ,oBAAoBA,CAChCV,MAAc,CACdC,UAAkB,CAClBI,IAAY,CACG,CACfW,OAAO,CAACC,GAAG,YAAAN,MAAA,CAAYX,MAAM,2BAAAW,MAAA,CAAyBV,UAAU,CAAE,CAAC,CACnE;AACA;AACF,CAEA;AACOiB,SAASA,CAAA,CAA0B,CACxC,OAAApB,aAAA,IAAY,IAAI,CAACP,MAAM,EACzB,CACF,CAEA;AAAA4B,uBAAA,CAtFa9B,sBAAsB,CAAtBA,sBAAsB,CAClBO,QAAQ,QAsFzB,MAAO,MAAM,CAAAwB,iBAAiB,CAAG,CAC/B;AACAC,MAAM,CAAE,CACN,gBAAgB,CAChB,iBAAiB,CACjB,eAAe,CACf,aAAa,CACb,cAAc,CACf,CAED;AACAC,YAAY,CAAE,CACZC,IAAI,CAAE,OAAO,CACbC,SAAS,CAAE,QAAQ,CACnBC,gBAAgB,CAAE,CAChBC,OAAO,CAAE,6DAA6D,CACtEC,QAAQ,CAAE,UAAU,CACpBC,aAAa,CAAE,QACjB,CACF,CAAC,CAED;AACAC,cAAc,CAAE,CACdC,4BAA4B,CAAE,IAAI,CAClCC,2BAA2B,CAAE,IAAI,CACjCC,yBAAyB,CAAE,IAC7B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,sBAAsB,CAAG,cAAAA,CACpCC,YAAiB,CAEa,IAD9B,CAAAC,UAAkC,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG/C,sBAAsB,CAACM,WAAW,CAAC,CAAC,CAEzE;AACA,GAAI,CAACuC,YAAY,EAAI,CAACA,YAAY,CAACK,EAAE,CAAE,CACrC,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA;AACA,KAAM,CAAAC,mBAAmB,CAAG,CAC1B,CAAEC,MAAM,CAAE,SAAS,CAAE3B,QAAQ,CAAE,CAAC,CAACmB,YAAY,CAACK,EAAG,CAAC,CAClD,CAAEG,MAAM,CAAE,OAAO,CAAE3B,QAAQ,CAAE,CAAC,CAACmB,YAAY,CAACS,KAAM,CAClD;AAAA,CACD,CAED,KAAM,CAAAC,eAAe,CAAGH,mBAAmB,CAACI,KAAK,CAACH,MAAM,EAAIA,MAAM,CAAC3B,QAAQ,CAAC,CAE5E,KAAM,CAAA+B,gBAAgB,CAAG,CACvBP,EAAE,CAAEL,YAAY,CAACK,EAAE,CACnBI,KAAK,CAAET,YAAY,CAACS,KAAK,CACzBI,IAAI,CAAEb,YAAY,CAACa,IAAI,EAAI,GAAApC,MAAA,CAAGuB,YAAY,CAACc,UAAU,MAAArC,MAAA,CAAIuB,YAAY,CAACe,SAAS,EAAGC,IAAI,CAAC,CAAC,CACxFnC,QAAQ,CAAE,KACZ,CAAC,CAED;AACA,KAAM,CAAAoC,SAAS,CAAGhB,UAAU,CAACjB,SAAS,CAAC,CAAC,CACxC,GAAIiC,SAAS,CAAC3D,OAAO,CAAE,CACrB;AACA,KAAM,CAAA4D,SAAS,CAAG,KAAM,CAAAjB,UAAU,CAACpC,wBAAwB,CACzDoD,SAAS,CAACzD,eAAe,EAAI,OAAO,CACpCwC,YAAY,CAACS,KACf,CAAC,CAED,OAAA7C,aAAA,CAAAA,aAAA,IACKgD,gBAAgB,MACnB/B,QAAQ,CAAEqC,SAAS,CAACjD,OAAO,GAE/B,CAEA,OAAAL,aAAA,CAAAA,aAAA,IACKgD,gBAAgB,MACnB/B,QAAQ,CAAE,IAAI,GAElB,CAAC,CAED;AACA,MAAO,MAAM,CAAAsC,kBAAkB,CAAGA,CAAA,GAAqB,CACrD;AACA,KAAM,CAAAC,OAAO,CAAG,CACd,SAAAC,iBAAA,QAAAA,iBAAA,CAAOC,MAAM,CAASC,gBAAgB,UAAAF,iBAAA,iBAAhCA,iBAAA,CAAkChB,EAAE,GAC1C,IAAM,GAAI,CAAAmB,eAAe,CAACF,MAAM,CAACG,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,CAAC,SAAS,CAAC,CAChE,SAAAC,qBAAA,QAAAA,qBAAA,CAAMC,QAAQ,CAACC,aAAa,CAAC,0BAA0B,CAAC,UAAAF,qBAAA,iBAAlDA,qBAAA,CAAoDG,YAAY,CAAC,SAAS,CAAC,GACjF,SAAAC,qBAAA,QAAAA,qBAAA,CAAOH,QAAQ,CAACI,cAAc,CAAC,mBAAmB,CAAC,UAAAD,qBAAA,iBAA7CA,qBAAA,CAA+DE,OAAO,CAACC,UAAU,GACxF,CAED,IAAK,KAAM,CAAA3B,MAAM,GAAI,CAAAY,OAAO,CAAE,CAC5B,KAAM,CAAAf,EAAE,CAAGG,MAAM,CAAC,CAAC,CACnB,GAAIH,EAAE,CAAE,MAAO,CAAAA,EAAE,CACnB,CAEA,MAAO,KAAI,CACb,CAAC,CAED;AACA,MAAO,MAAM,CAAA+B,yBAAyB,CAAI1D,KAAY,EAAK,CACzDI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAE7C;AACA,KAAM,CAAA2D,UAAU,CAAG,CACjB,uBAAuB,CAAE,CACvBnE,OAAO,CAAE,wCAAwC,CACjDoE,UAAU,CAAE,QACd,CACF,CAAC,CAED,KAAM,CAAAC,kBAAkB,CAAG,CACzBrE,OAAO,CAAE,8BAA8B,CACvCoE,UAAU,CAAE,UACd,CAAC,CAED,KAAM,CAAAE,WAAW,CAAGH,UAAU,CAAC3D,KAAK,CAACR,OAAO,CAA4B,EAAIqE,kBAAkB,CAE9F;AACA;AAEA,MAAO,CACL7D,KAAK,CAAE,IAAI,CACXR,OAAO,CAAEsE,WAAW,CAACtE,OAAO,CAC5BuE,QAAQ,CAAED,WAAW,CAACF,UACxB,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}