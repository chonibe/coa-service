"use client"

import { useState, useEffect, useRef } from "react"
import { Dialog, DialogContent } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Avatar } from "@/components/ui/avatar"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Loader2, Lock, Unlock, Share2, Heart, Calendar, Award, Scan, ExternalLink } from "lucide-react"
import { cn } from "@/lib/utils"
import { NfcWizard } from "./components/nfc-wizard"
import { UpcomingDrops } from "./components/upcoming-drops"
import { Spinner } from "@/components/ui/spinner"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"
import { Alert, AlertCircle, AlertDescription, AlertTitle } from "@/components/ui/alert"

interface Artist {
  id: string
  name: string
  bio: string
  avatar_url: string
  collector_count: number
  upcoming_drops: Array<{
    id: string
    title: string
    release_date: string
    image_url: string
  }>
}

interface Story {
  id: number
  title: string
  content: string
  media_urls: string[]
  requires_nfc: boolean
}

interface Credit {
  name: string
  role: string
}

interface Benefit {
  id: string
  title: string
  description: string
  requires_nfc: boolean
}

interface LineItem {
  id: string
  name: string
  product_id: string
  vendor_id: string
  image_url: string
  nfc_claimed_at?: string
}

interface CertificateModalProps {
  lineItem: LineItem | null
  onClose: () => void
}

export function CertificateModal({ lineItem, onClose }: CertificateModalProps) {
  const [isOpen, setIsOpen] = useState(true)
  const [activeTab, setActiveTab] = useState("about")
  const [artist, setArtist] = useState<Artist | null>(null)
  const [story, setStory] = useState<Story | null>(null)
  const [credits, setCredits] = useState<Credit[]>([])
  const [benefits, setBenefits] = useState<Benefit[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [showNfcWizard, setShowNfcWizard] = useState(false)
  const [scrollY, setScrollY] = useState(0)
  const [loadingStates, setLoadingStates] = useState({
    artist: true,
    story: true,
    credits: true,
    benefits: true,
  })
  const contentRef = useRef<HTMLDivElement>(null)

  const handleClose = () => {
    setIsOpen(false)
    onClose()
  }

  const handleNfcSuccess = async () => {
    if (!lineItem) return

    setShowNfcWizard(false)
    setLoadingStates({
      artist: true,
      story: true,
      credits: true,
      benefits: true,
    })
    
    try {
      const [artistRes, storyRes, creditsRes, benefitsRes] = await Promise.all([
        fetch(`/api/artist/${lineItem.vendor_id}`),
        fetch(`/api/story?product_id=${lineItem.product_id}`),
        fetch(`/api/credits?product_id=${lineItem.product_id}`),
        fetch(`/api/benefits?product_id=${lineItem.product_id}`)
      ])

      const [artistData, storyData, creditsData, benefitsData] = await Promise.all([
        artistRes.json(),
        storyRes.json(),
        creditsRes.json(),
        benefitsRes.json()
      ])

      setArtist(artistData.artist)
      setStory(storyData.story)
      setCredits(creditsData.credits)
      setBenefits(benefitsData.benefits)
    } catch (error) {
      console.error("Error refreshing data:", error)
    } finally {
      setLoadingStates({
        artist: false,
        story: false,
        credits: false,
        benefits: false,
      })
    }
  }

  useEffect(() => {
    const handleScroll = () => {
      if (contentRef.current) {
        setScrollY(contentRef.current.scrollTop)
      }
    }

    const content = contentRef.current
    if (content) {
      content.addEventListener('scroll', handleScroll)
      return () => content.removeEventListener('scroll', handleScroll)
    }
  }, [])

  useEffect(() => {
    const fetchData = async () => {
      if (!lineItem) {
        setIsLoading(false)
        return
      }

      try {
        // Fetch all data in parallel
        const [artistRes, storyRes, creditsRes, benefitsRes] = await Promise.all([
          fetch(`/api/artist/${lineItem.vendor_id}`),
          fetch(`/api/story?product_id=${lineItem.product_id}`),
          fetch(`/api/credits?product_id=${lineItem.product_id}`),
          fetch(`/api/benefits?product_id=${lineItem.product_id}`)
        ])

        const [artistData, storyData, creditsData, benefitsData] = await Promise.all([
          artistRes.json(),
          storyRes.json(),
          creditsRes.json(),
          benefitsRes.json()
        ])

        setArtist(artistData.artist)
        setStory(storyData.story)
        setCredits(creditsData.credits)
        setBenefits(benefitsData.benefits)
        setLoadingStates({
          artist: false,
          story: false,
          credits: false,
          benefits: false,
        })
      } catch (error) {
        console.error("Error fetching data:", error)
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [lineItem])

  if (!lineItem && !isLoading) {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="max-w-6xl h-[80vh]">
          <div className="flex items-center justify-center h-full">
            <p className="text-gray-500">No item selected</p>
          </div>
        </DialogContent>
      </Dialog>
    )
  }

  if (isLoading) {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="max-w-6xl h-[80vh]">
          <Spinner size="lg" />
        </DialogContent>
      </Dialog>
    )
  }

  return (
    <>
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="max-w-6xl h-[80vh] overflow-hidden" ref={contentRef}>
          <div className="relative">
            <div
              className="absolute inset-0 bg-cover bg-center z-0 transition-transform duration-300"
              style={{
                backgroundImage: `url(${lineItem.image_url})`,
                transform: `scale(${1 + scrollY * 0.001}) translateY(${scrollY * 0.5}px)`,
                opacity: Math.max(0, 1 - scrollY * 0.003),
              }}
            />
            <div className="absolute inset-0 bg-gradient-to-b from-black/50 to-black/90 z-10" />
            <div className="relative z-20 p-6">
              <div className="flex justify-between items-start">
                <div>
                  <h2 className="text-2xl font-bold text-white mb-2">{lineItem.name}</h2>
                  <div className="flex gap-2">
                    {lineItem.nfc_claimed_at ? (
                      <Badge variant="success" className="flex items-center gap-1">
                        <Unlock size={14} />
                        NFC Paired
                      </Badge>
                    ) : (
                      <Badge variant="secondary" className="flex items-center gap-1">
                        <Lock size={14} />
                        NFC Required
                      </Badge>
                    )}
                    <Badge variant="outline" className="text-white">
                      Edition #123/500
                    </Badge>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" size="icon" className="text-white">
                    <Share2 size={18} />
                  </Button>
                  <Button variant="outline" size="icon" className="text-white">
                    <Heart size={18} />
                  </Button>
                </div>
              </div>
            </div>
          </div>

          <ScrollArea className="flex-1 mt-4">
            <Tabs defaultValue="about" value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="w-full justify-start">
                <TabsTrigger value="about">About</TabsTrigger>
                <TabsTrigger value="artist">Artist</TabsTrigger>
                <TabsTrigger value="story">Story</TabsTrigger>
                <TabsTrigger value="benefits">Benefits</TabsTrigger>
                <TabsTrigger value="credits">Credits</TabsTrigger>
              </TabsList>

              <div className="mt-4">
                <TabsContent value="about" className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          <Calendar size={18} />
                          Release Date
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p>March 15, 2024</p>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          <Award size={18} />
                          Edition
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p>#123 of 500</p>
                      </CardContent>
                    </Card>
                  </div>
                </TabsContent>

                <TabsContent value="artist">
                  {loadingStates.artist ? (
                    <div className="flex justify-center py-8">
                      <Spinner />
                    </div>
                  ) : artist ? (
                    <div className="space-y-6">
                      <div className="flex items-center gap-4">
                        <Avatar className="w-16 h-16">
                          <img src={artist.avatar_url} alt={artist.name} />
                        </Avatar>
                        <div>
                          <h3 className="text-lg font-semibold">{artist.name}</h3>
                          <p className="text-sm text-gray-500">{artist.collector_count} collectors</p>
                        </div>
                      </div>
                      <p className="text-gray-600">{artist.bio}</p>
                      <div className="space-y-4">
                        <h4 className="font-semibold">Upcoming Drops</h4>
                        <UpcomingDrops drops={artist.upcoming_drops} />
                      </div>
                    </div>
                  ) : (
                    <p className="text-gray-500 text-center py-8">Artist information not available</p>
                  )}
                </TabsContent>

                <TabsContent value="story">
                  {loadingStates.story ? (
                    <div className="flex justify-center py-8">
                      <Spinner />
                    </div>
                  ) : story ? (
                    <div className="space-y-6">
                      <h3 className="text-xl font-semibold">{story.title}</h3>
                      {story.requires_nfc && !lineItem.nfc_claimed_at ? (
                        <div className="space-y-4">
                          <Alert>
                            <AlertCircle className="h-4 w-4" />
                            <AlertTitle>NFC Pairing Required</AlertTitle>
                            <AlertDescription>
                              Pair your NFC tag to unlock the full story and exclusive content.
                            </AlertDescription>
                          </Alert>
                          <Button onClick={() => setShowNfcWizard(true)} className="w-full">
                            <Scan className="mr-2 h-4 w-4" />
                            Pair NFC Tag
                          </Button>
                        </div>
                      ) : (
                        <>
                          <p className="text-gray-600">{story.content}</p>
                          <div className="grid grid-cols-2 gap-4">
                            {story.media_urls.map((url, index) => (
                              <img
                                key={index}
                                src={url}
                                alt={`Story media ${index + 1}`}
                                className="rounded-lg"
                              />
                            ))}
                          </div>
                        </>
                      )}
                    </div>
                  ) : (
                    <p className="text-gray-500 text-center py-8">Story not available</p>
                  )}
                </TabsContent>

                <TabsContent value="benefits">
                  {loadingStates.benefits ? (
                    <div className="flex justify-center py-8">
                      <Spinner />
                    </div>
                  ) : benefits.length > 0 ? (
                    <div className="grid grid-cols-2 gap-4">
                      {benefits.map((benefit) => (
                        <Card key={benefit.id}>
                          <CardHeader>
                            <CardTitle>{benefit.title}</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <p className="text-sm text-gray-600">{benefit.description}</p>
                          </CardContent>
                          <CardFooter>
                            {benefit.requires_nfc && !lineItem.nfc_claimed_at ? (
                              <Button
                                variant="outline"
                                className="w-full"
                                onClick={() => setShowNfcWizard(true)}
                              >
                                <Lock className="mr-2 h-4 w-4" />
                                Pair NFC to Unlock
                              </Button>
                            ) : (
                              <Button className="w-full">
                                <ExternalLink className="mr-2 h-4 w-4" />
                                Access Benefit
                              </Button>
                            )}
                          </CardFooter>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500 text-center py-8">No benefits available</p>
                  )}
                </TabsContent>

                <TabsContent value="credits">
                  {loadingStates.credits ? (
                    <div className="flex justify-center py-8">
                      <Spinner />
                    </div>
                  ) : credits.length > 0 ? (
                    <div className="space-y-4">
                      {credits.map((credit, index) => (
                        <div key={index} className="flex justify-between items-center">
                          <p className="font-medium">{credit.name}</p>
                          <Badge variant="secondary">{credit.role}</Badge>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500 text-center py-8">No credits available</p>
                  )}
                </TabsContent>
              </div>
            </Tabs>
          </ScrollArea>
        </DialogContent>
      </Dialog>

      {showNfcWizard && (
        <NfcWizard
          onClose={() => setShowNfcWizard(false)}
          onSuccess={handleNfcSuccess}
          lineItem={lineItem}
        />
      )}
    </>
  )
} 